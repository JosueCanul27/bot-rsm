pipeline {
  agent any
 parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
    }

    // Variables de entorno
    environment {
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"        
    }

    stages {
          stage('stop/rm') { // Detener y eliminar contenedor
            when { // Validar si existe el contenedor o si esta corriendo
                expression { 
                    DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"').trim()
                    return  DOCKER_EXIST != '' 
                }
            }

            steps { // Detener 
                script{
                    sh ''' 
                         docker stop ${name_final}
                    '''
                    }
                }                                    
            }
           
        stage('build') { // Construir imagen
            steps {
                script{
                    sh ''' 
                    docker build    jobs/dockerweb/ -t ${name_imagen}:${tag_imagen}
                    '''
                    }
                }                                       
            }

            stage('run') { // Se va correr el contenedor
            steps {
                script{
                    sh ''' 
                        docker run -dp ${puerto_imagen}:80 --name ${name_final} ${name_imagen}:${tag_imagen}
 
                    '''
                    }
                    
                }                    
                                  
            }
            
          
        }   
    }